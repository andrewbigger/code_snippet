#!/usr/bin/env ruby

$LOAD_PATH.unshift(__dir__ + '/../lib')

require 'rubygems'
require 'optparse'
require 'highline'

require 'code_snippet'
require 'code_snippet/cli'

USAGE = "Snippet is a CLI tool for quick access to code snippets

Usage:\tsnippet <command> <variables> <opts>
Options:
  \s\s\s\s--trace\t\t trace mode on
  -l, --language\t snippet language filter
  -c, --copy\t\t copy snippet to clipboard

  -h, --help\t\t print usage

Commands:
  show\t\t\t finds and shows snippet
  list\t\t\t displays a list of snippets

  path\t\t\t prints configured SNIPPET_DIR
  version\t\t prints gem version
".freeze

@trace = false
@overwrite = false

OptionParser.new do |opts|
  opts.banner = USAGE
  opts.on('--trace') { @trace = true }

  opts.on('-l', '--language STRING')  { |l| @lang = l }
  opts.on('-c', '--copy BOOL')        { @copy = true }

  opts.on_tail('-h', '--help') do
    CodeSnippet::CLI.print_message_and_exit(USAGE)
  end
end.parse!

begin
  raise 'ERROR: no command provided' unless ARGV[0]

  cmd = ARGV.shift
  CodeSnippet::CLI::Commands.public_send(
    cmd.to_sym,
    @lang,
    !@copy.nil?,
    ARGV
  )
rescue StandardError => e
  CodeSnippet::CLI.print_message(e)
  CodeSnippet::CLI.print_message(e.backtrace) if @trace
  CodeSnippet::CLI.print_message("\n")
  CodeSnippet::CLI.print_message_and_exit(USAGE)
end

exit(0)
